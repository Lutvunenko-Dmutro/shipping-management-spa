import React from 'react';

/**
 * Презентаційний React-компонент для відображення списку контейнерів у вигляді таблиці.
 * Цей компонент отримує дані та функції для обробки дій через пропси (props)
 * і не має власного внутрішнього стану (state).
 * @param {object} props - Пропси компонента.
 * @param {Array<object>} props.containers - Масив об'єктів, що представляють контейнери.
 * @param {function} props.onDelete - Функція для видалення контейнера, викликається з ID контейнера.
 * @param {function} props.onUpdate - Функція для оновлення статусу контейнера, викликається з ID та новим статусом.
 */
function ContainerList({ containers, onDelete, onUpdate }) {

  // --- Допоміжна Функція для Стилізації Статусів ---

  /**
   * Повертає відповідний CSS-клас для стилізації елемента статусу
   * залежно від текстового значення статусу.
   * @param {string} status - Текст статусу ('У дорозі', 'Доставлено', 'Очікує').
   * @returns {string} - CSS-клас ('status-transit', 'status-delivered', 'status-pending').
   */
  const getStatusClass = (status) => {
    switch (status) {
      case 'У дорозі':
        return 'status-transit'; // Клас для статусу "в дорозі"
      case 'Доставлено':
        return 'status-delivered'; // Клас для статусу "доставлено"
      case 'Очікує': // Включає 'Очікує' та будь-які інші невідомі статуси
      default:
        return 'status-pending'; // Клас за замовчуванням
    }
  };

  // --- JSX Розмітка Компонента ---
  // Повертає HTML-подібну структуру, яку React відрендерить на сторінці.
  return (
    // Обгортка для таблиці, що дозволяє горизонтальну прокрутку на малих екранах
    <div className="table-container"> 
      <table>
        {/* Заголовок таблиці */}
        <thead>
          <tr>
            <th>ID Контейнера</th>
            <th>Статус</th>
            <th>Місцезнаходження</th>
            <th>Призначення</th>
            <th>Дії</th>
          </tr>
        </thead>
        {/* Тіло таблиці, де будуть відображені дані */}
        <tbody>
          {/* Динамічне створення рядків таблиці */}
          {/* Використовуємо метод .map() для ітерації по масиву 'containers' */}
          {/* Для кожного об'єкта 'container' в масиві створюємо рядок таблиці <tr> */}
          {containers.map((container) => (
            // Атрибут 'key' є обов'язковим при рендерингу списків в React.
            // Він допомагає React ефективно оновлювати елементи списку.
            // Використовуємо унікальний 'id' контейнера як ключ.
            <tr key={container.id}>
              {/* Відображення даних контейнера у відповідних комірках */}
              <td>{container.id}</td>
              <td>
                {/* Відображення статусу зі спеціальним стилем */}
                {/* Використовуємо шаблонні рядки (`) для динамічного додавання CSS-класу */}
                <span className={`status ${getStatusClass(container.status)}`}>
                  {container.status} {/* Виводимо текст статусу */}
                </span>
              </td>
              <td>{container.location}</td>
              <td>{container.destination}</td>
              {/* Комірка з кнопками дій */}
              <td>
                {/* Кнопка для оновлення статусу */}
                <button
                  className="btn btn-update" // CSS клас для стилізації
                  // Обробник події 'onClick'. Викликає функцію 'onUpdate',
                  // передану через пропси, з ID поточного контейнера і новим статусом 'Доставлено'.
                  // Використовуємо стрілочну функцію, щоб передати параметри в onUpdate.
                  onClick={() => onUpdate(container.id, 'Доставлено')}
                >
                  Доставлено
                </button>
                {/* Кнопка для видалення контейнера */}
                <button
                  className="btn btn-delete" // CSS клас для стилізації
                  // Обробник події 'onClick'. Викликає функцію 'onDelete',
                  // передану через пропси, з ID поточного контейнера.
                  onClick={() => onDelete(container.id)}
                >
                  Видалити
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

// Експортуємо компонент, щоб його можна було імпортувати в інших файлах (напр., в App.js)
export default ContainerList;